// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Stock {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  tags        String

  products Product[]
  Tags     Tags[]
  User     User      @relation(fields: [userId], references: [id])
}

model Tags {
  id      Int    @id @default(autoincrement())
  name    String
  Stock   Stock? @relation(fields: [stockId], references: [id])
  stockId Int?
}

model Product {
  id             Int                @id @default(autoincrement())
  name           String
  qtyInStock     Int                @map("qty_in_stock")
  productCode    String             @map("product_code")
  barcode        String
  tag            String
  expirationDate DateTime           @map("expiration_date")
  unitPrice      Decimal            @map("unit_price") @db.Decimal(10, 2)
  classification ClassificationType
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  Stock   Stock? @relation(fields: [stockId], references: [id])
  stockId Int?
}

enum ClassificationType {
  A
  B
  C
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  stock         Stock[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
